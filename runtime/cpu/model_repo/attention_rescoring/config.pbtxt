# Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pbtxt文件是一个文本格式的文件，它描述了模型的图形结构，包括节点和边的信息。

# 这个文件是所有模型 ensemble 的配置文件，也可以说是总管输入输出
name: "attention_rescoring"
platform: "ensemble"
max_batch_size: 64 #MAX_BATCH

# 这是一个音频数据，数据类型为 TYPE_FP32，维度为 [-1]，表示这是一个一维数组，长度未知。
input [
  {
    name: "WAV"
    data_type: TYPE_FP32
    # 维度设置为-1，这通常意味着这个维度是可变的，即音频数据的长度可以是任意的。
    dims: [-1]
  },
  # 音频长度
  {
    name: "WAV_LENS"
    data_type: TYPE_INT32
    # 维度设置为1，表示这是一个单一的值，即每个音频文件只有一个长度值。
    dims: [1]
  }
]

# 字符串格式输出
output [
  {
    name: "TRANSCRIPTS"
    data_type: TYPE_STRING
    # 维度设置为1，输出一个字符串
    dims: [1]
  }
]

# 集成调度，对多个模型步骤进行控制调度排序
ensemble_scheduling {
 step [
   {
    # 特征提取模型
    model_name: "feature_extractor"
    # 表示使用最新版本的模型
    model_version: -1
    input_map {
      key: "wav"
      value: "WAV"
    }
    # 输入输出数据的映射关系
    input_map {
      key: "wav_lens"
      value: "WAV_LENS"
    }
    output_map {
      key: "chunk"
      value: "CHUNK"
    }
    output_map {
      key: "offset"
      value: "OFFSET"
    }
    output_map {
      key: "att_cache"
      value: "ATT_CACHE"
    }
    output_map {
      key: "cnn_cache"
      value: "CNN_CACHE"
    }
   },
   # 最新编码器模型
   {
    model_name: "encoder"
    model_version: -1
    # 输入特征提取后的音频
    input_map {
      key: "chunk"
      value: "CHUNK"
    }
    # 输入特征提取后的音频长度（帧或者毫秒）
    input_map {
      key: "offset"
      value: "OFFSET"
    }
    input_map {
      key: "att_cache"
      value: "ATT_CACHE"
    }
    input_map {
      key: "cnn_cache"
      value: "CNN_CACHE"
    }
    # 输出编码后的中间表示
    output_map {
      key: "output"
      value: "output"
    }
    output_map {
      key: "r_att_cache"
      value: "r_att_cache"
    }
    # 输出编码后序列的长度
    output_map {
      key: "r_cnn_cache"
      value: "r_cnn_cache"
    }
  },
  {
    model_name: "ctc"
    model_version: -1
    input_map {
      key: "hidden"
      value: "output"   # 这里有问题，输入值错误，value应该是encoder的output，修改完成
    }
    output_map {
      key: "probs"
      value: "probs"
    }
  },
  # 最新版scoring
  {
      model_name: "scoring"
      model_version: -1
      # 接收编码器的输出作为输入
      input_map {
          key: "output"
          value: "output"
      }
      # 接收编码器的输出长度作为输入
      input_map {
          key: "r_att_cache"
          value: "r_att_cache"
      }
      # 接受束搜索解码的概率作为输入，改名为batch_log_probs：迭代过的束搜索解码的概率
      input_map {
          key: "r_cnn_cache"
          value: "r_cnn_cache"
      }
      # 接受束搜索解码的概率索引作为输入，改名为batch_log_probs_idx：迭代过的束搜索解码的概率索引
      input_map {
          key: "probs"
          value: "probs"
      }
      # 输出最终序列
      output_map {
          key: "OUTPUT0"
          value: "TRANSCRIPTS"
      }
  }
 ]
}
