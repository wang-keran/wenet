# Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 编码
# 这是config_template.pbtxt的模板，实际使用的时候，需要修改对应的参数，比如模型文件名，batch_size等。

name: "encoder"
backend: "onnxruntime"
default_model_filename: "encoder.onnx"

max_batch_size: 512

sequence_batching{
    max_sequence_idle_microseconds: 5000000
    oldest {
      max_candidate_sequences: 1024
      max_queue_delay_microseconds: 5000
    }
    control_input [
    ]
    # offset都是自带的
    state [
    {
      input_name: "offset"
      output_name: "r_offset"
      data_type: TYPE_INT64
      dims: [ 1 ]
      initial_state: {
       data_type: TYPE_INT64
       dims: [ 1 ]
       zero_data: true
       name: "initial state"
      }
    },
    # num_layers来自train.yaml,encoder_conf.num_blocks，是预训练模型自带的
    # num_head来自train.yaml,encoder_conf.attention_heads，是预训练模型自带的
    # att_cache_output_size来自train.yaml,["encoder_conf"]["output_size"]//num_head*2，是训练模型自带的算出来的
    # cache_size来自命令输入，chunk_size * num_left_chunks
    {
      input_name: "att_cache"
      output_name: "r_att_cache"
      data_type: TYPE_FP32
      dims: [ 12, 4, 64, 128 ]
      initial_state: {
       data_type: TYPE_FP32
       dims: [ 12, 4, 64, 128 ]
       zero_data: true
       name: "initial state"
      }
    },
    # dims这个7的维度是原来pbtxt文件的，因为输出没有config.pbtxt的模板，实际使用的时候，可能需要修改对应的参数。就是7,计算方法在export_onnx_gpu.py里
    # output_size:configs["encoder_conf"]["output_size"]  来自train.yaml
    # cnn_module_cache来自train.yaml,configs["encoder_conf"].get("cnn_module_kernel", 1) - 1，没有cnn_module_kernel默认是1，最终结果是1-1=0
    {
      input_name: "cnn_cache"
      output_name: "r_cnn_cache"
      data_type: TYPE_FP32
      dims: [12, 256, 7]
      initial_state: {
       data_type: TYPE_FP32
       dims: [12, 256, 7]
       zero_data: true
       name: "initial state"
      }
    },
    {
      input_name: "cache_mask"
      output_name: "r_cache_mask"
      data_type: TYPE_FP32
      dims: [1, 64]
      initial_state: {
       data_type: TYPE_FP32
       dims: [1, 64]
       zero_data: true
       name: "initial state"
      }
    }
  ]
}
input [
  {
    name: "chunk"
    data_type: TYPE_FP32
    dims: [ 1, 0, 80 ]  # batch size = 1，动态时间步长，特征维度 80
  },
  {
    name: "offset"
    data_type: TYPE_INT64
    dims: [ ]  # 未知形状，定义为空数组
  },
  {
    name: "required_cache_size"
    data_type: TYPE_INT64
    dims: [ ]  # 未知形状，定义为空数组
  },
  {
    name: "att_cache"
    data_type: TYPE_FP32
    dims: [ 12, 4, 0, 128 ]  # 12 层，4 个头，动态时间步长，特征维度 128
  },
  {
    name: "cnn_cache"
    data_type: TYPE_FP32
    dims: [ 12, 1, 256, 7 ]  # 12 层，单通道，特征维度 256，卷积核大小 7
  },
  {
    name: "att_mask"
    data_type: TYPE_BOOL
    dims: [ 1, 1, 0 ]  # batch size = 1，单头，动态时间步长
  }
]
output [
  {
    name: "output"
    data_type: TYPE_FP32
    dims: [ 0, 0, 256 ]  # 动态 batch，动态时间步长，特征维度 256
  },
  {
    name: "r_att_cache"
    data_type: TYPE_FP32
    dims: [ 12, 4, 0, 128 ]  # 返回的注意力缓存，形状与输入一致
  },
  {
    name: "r_cnn_cache"
    data_type: TYPE_FP32
    dims: [ 12, 1, 256, 0 ]  # 返回的卷积缓存，动态时间步长
  }
]
instance_group [
    {
      count: 2
      kind: KIND_CPU
    }
]
